using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace Sentrio.Tests
{
    [TestClass]
    public class CryptoWorksTests
    {
        /// <summary>
        /// Tests if <see cref="CryptoWorks.Encrypt(byte[], byte[])"/> works correctly.
        /// Incidently tests <see cref="CryptoWorks.Decrypt(byte[], byte[])"/> too.
        /// </summary>
        [TestMethod, TestCategory("Crypto")]
        public async Task TextEncryptDecryptTest()
        {
            string message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit.";
            string password = "1234567890";
            int key_size = 128;
            int iterations = 100;

            try
            {
                // Encryption
                byte[] data = Encoding.ASCII.GetBytes(message);
                string ciphertext = string.Empty;
                using (MemoryStream input = new MemoryStream(data))
                using (MemoryStream output = new MemoryStream())
                {
                    await CryptoWorks.Encrypt(input, output, password, key_size, iterations);
                    ciphertext = Encoding.ASCII.GetString(output.ToArray());
                }

                // Decryption
                byte[] ciphertext_data = Encoding.ASCII.GetBytes(ciphertext);
                string plaintext = string.Empty;
                using (MemoryStream input = new MemoryStream(ciphertext_data))
                using (MemoryStream output = new MemoryStream())
                {
                    await CryptoWorks.Decrypt(input, output, password);
                    plaintext = Encoding.ASCII.GetString(output.ToArray());
                }

                Assert.IsTrue(plaintext.SequenceEqual(message));
            }
            catch (Exception e)
            {
                Assert.Fail(e.ToString());
            }
        }

        /// <summary>
        /// Tests if <see cref="CryptoWorks.Encrypt(string, string, string, int, int)"/> works correctly.
        /// Incidently tests <see cref="CryptoWorks.Decrypt(string, string, string)"/> too.
        /// </summary>
        [TestMethod, TestCategory("Crypto")]
        public async Task FileEncryptDecryptTest()
        {
            string password = "1234567890";
            int key_size = 128;
            int iterations = 100;

            try
            {
                // Prepare file path
                string project_path = Path.GetDirectoryName(Path.GetDirectoryName(Directory.GetCurrentDirectory()));
                string file_path = $@"{project_path}\testfile.dat";
                string encrypted_file_path = $@"{file_path}.test";

                // Data generation
                // Generate 1mb of random data
                byte[] random_data;
                using (MemoryStream input = new MemoryStream(Utilities.GetSecureRandomBytes(1024 * 1024)))
                using (FileStream output = new FileStream(file_path, FileMode.Create))
                {
                    // Writing generated bytes to file
                    await input.CopyToAsync(output);
                    random_data = input.ToArray();
                }

                // Encryption
                await CryptoWorks.Encrypt(file_path, encrypted_file_path, password, key_size, iterations);
                File.Delete(file_path);

                // Decryption
                await CryptoWorks.Decrypt(encrypted_file_path, file_path, password);
                File.Delete(encrypted_file_path);

                byte[] read_data;
                using (FileStream input = new FileStream(file_path, FileMode.Open))
                using (MemoryStream output = new MemoryStream())
                {
                    // Reading bytes from file
                    await input.CopyToAsync(output);
                    read_data = output.ToArray();
                }
                File.Delete(file_path);

                // Compare generated with received
                Assert.IsTrue(Utilities.CompareByteArrays(random_data, read_data));
            }
            catch (Exception e)
            {
                Assert.Fail(e.ToString());
            }
        }
    }
}